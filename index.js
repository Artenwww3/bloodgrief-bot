const { Client, GatewayIntentBits, Partials, PermissionsBitField, EmbedBuilder } = require('discord.js');
const http = require('http');

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers
  ],
  partials: [Partials.Channel]
});

client.once('ready', () => {
  console.log(`[BOT] ${client.user.tag} –∑–∞–ø—É—â–µ–Ω!`);
  client.user.setPresence({
    activities: [{ name: 'ü©∏ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ BLOODGRIEF ü©∏', type: 0 }],
    status: 'online'
  });
});

client.on('messageCreate', async message => {
  if (!message.guild || message.author.bot) return;
  const prefix = '!';
  if (!message.content.startsWith(prefix)) return;

  const args = message.content.slice(prefix.length).trim().split(/ +/g);
  const command = args.shift().toLowerCase();

  // !–∏–Ω—Ñ–æ
  if (command === '–∏–Ω—Ñ–æ') {
    return message.channel.send(
      'ü©∏ **–Ø ‚Äî –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ BLOODGRIEF** ü©∏\n\n' +
      '–Ø –æ—Ç–≤–µ—á–∞—é –∑–∞ —Ç–∏–∫–µ—Ç—ã, –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞.\n' +
      '–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª –∏ –Ω–∞—Å—Ç—Ä–æ–∏–ª –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞.\n\n' +
      '‚öôÔ∏è –ë—É–¥—É —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è —Å –∫–∞–∂–¥—ã–º –∞–ø–¥–µ–π—Ç–æ–º.\n\n' +
      '**–°–¥–µ–ª–∞–ª:** NaSkille'
    );
  }

  // !—Å–Ω–µ—Å–∏
  if (command === '—Å–Ω–µ—Å–∏') {
    if (!message.member.permissions.has(PermissionsBitField.Flags.ManageMessages)) {
      return message.reply('‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.');
    }

    const count = parseInt(args[0]);
    if (!count || isNaN(count)) return message.reply('‚ùó –£–∫–∞–∂–∏ —á–∏—Å–ª–æ: `!—Å–Ω–µ—Å–∏ 20`');
    if (count < 1 || count > 5000) return message.reply('‚ùó –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –æ—Ç 1 –¥–æ 5000 —Å–æ–æ–±—â–µ–Ω–∏–π.');

    let deleted = 0;
    let lastId = null;

    try {
      while (deleted < count) {
        const options = { limit: 100 };
        if (lastId) options.before = lastId;

        const messages = await message.channel.messages.fetch(options);
        if (!messages.size) break;

        for (const msg of messages.values()) {
          if (deleted >= count) break;
          try {
            await msg.delete();
            deleted++;
            await new Promise(res => setTimeout(res, 250));
          } catch (e) {
            console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ${msg.id}`, e.message);
          }
          lastId = msg.id;
        }
      }

      message.channel.send(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deleted} —Å–æ–æ–±—â–µ–Ω–∏–π.`).then(msg => {
        setTimeout(() => msg.delete(), 5000);
      });

    } catch (err) {
      console.error('[–°–ù–ï–°–ò ERROR]', err);
      message.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ.');
    }
  }

  // !–ø—Ä–æ–≤–µ—Ä—å
  if (command === '–ø—Ä–æ–≤–µ—Ä—å') {
    const ownerRole = message.guild.roles.cache.find(r => r.name.toLowerCase() === 'owner');
    if (!ownerRole || !message.member.roles.cache.has(ownerRole.id)) {
      return message.reply('üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—ã –ø—Ä–æ–µ–∫—Ç–∞ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.');
    }

    const target = message.mentions.members.first();
    if (!target) return message.reply('‚ùó –£–∫–∞–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `!–ø—Ä–æ–≤–µ—Ä—å @user`');

    const accountAge = Math.floor((Date.now() - target.user.createdAt) / (1000 * 60 * 60 * 24));
    const joinedAge = Math.floor((Date.now() - target.joinedAt) / (1000 * 60 * 60 * 24));
    const isSuspicious = accountAge < 7 || !target.user.avatar;
    const riskyNameTags = ['cheat', 'hack', 'bypass', 'aura', 'aim', '1337'];
    const tagLower = target.user.tag.toLowerCase();
    const riskyName = riskyNameTags.find(w => tagLower.includes(w));
    const forbiddenRoles = ['–ß–°', '–ú—É—Ç', '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ'];
    const hasForbidden = target.roles.cache.some(role => forbiddenRoles.includes(role.name));
    const hasAvatar = !!target.user.avatar;
    const hasNitro = target.user.avatar && target.user.avatar.startsWith('a_');
    const presence = target.presence?.status || '‚ö´ –û—Ñ—Ñ–ª–∞–π–Ω';

    const embed = new EmbedBuilder()
      .setColor(isSuspicious || riskyName || hasForbidden ? 0xff0000 : 0x00ff00)
      .setTitle(`üìã –ü—Ä–æ–≤–µ—Ä–∫–∞: ${target.user.tag}`)
      .setThumbnail(target.user.displayAvatarURL({ dynamic: true }))
      .addFields(
        { name: 'üÜî Discord ID', value: target.id, inline: false },
        { name: 'üì∂ –°—Ç–∞—Ç—É—Å', value: presence, inline: true },
        { name: 'üìÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω', value: `<t:${Math.floor(target.user.createdTimestamp / 1000)}:R>`, inline: true },
        { name: 'üì• –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å', value: `<t:${Math.floor(target.joinedTimestamp / 1000)}:R>`, inline: true },
        { name: 'üñºÔ∏è –ê–≤–∞—Ç–∞—Ä', value: hasAvatar ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç', inline: true },
        { name: 'üíé Nitro', value: hasNitro ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç', inline: true },
        { name: 'üé≠ –†–æ–ª–∏', value: target.roles.cache.map(r => r.name).slice(1).join(', ') || '–Ω–µ—Ç', inline: false },
        { name: 'üí£ –ù–∏–∫', value: riskyName ? `‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: \`${riskyName}\`` : '‚úÖ –ß–∏—Å—Ç–æ', inline: false },
        { name: 'üö´ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–æ–ª–∏', value: hasForbidden ? '‚ùó –ï—Å—Ç—å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ä–æ–ª–∏' : '‚úÖ –ù–µ—Ç', inline: false },
        { name: 'üîç –í—ã–≤–æ–¥', value: (isSuspicious || riskyName || hasForbidden) ? '‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞ –æ–ø–∞—Å–Ω–æ—Å—Ç—å, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞.' : '‚úÖ –ë–µ–∑–æ–ø–∞—Å–µ–Ω', inline: false }
      )
      .setFooter({ text: 'BLOODGRIEF ‚Äî –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞' })
      .setTimestamp();

    message.channel.send({ embeds: [embed] });
  }
});

// –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –≤ —Ç–∏–∫–µ—Ç-–∫–∞–Ω–∞–ª–µ
client.on('channelCreate', async channel => {
  if (!channel.isTextBased()) return;
  if (!channel.name.includes('ticket')) return;

  setTimeout(async () => {
    try {
      const messages = await channel.messages.fetch({ limit: 10 });
      const userMessage = messages.find(msg => !msg.author.bot);
      const user = userMessage?.author;

      if (user) {
        channel.send(`üëã –ü—Ä–∏–≤–µ—Ç, <@${user.id}>! –ñ–¥–∏ —Å—Ç–∞—Ñ—Ñ ‚Äî —Å–∫–æ—Ä–æ –∫—Ç–æ-—Ç–æ –∏–∑ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ —Ç–≤–æ–π —Ç–∏–∫–µ—Ç.`);
      } else {
        channel.send(`üëã –ü—Ä–∏–≤–µ—Ç! –ñ–¥–∏ —Å—Ç–∞—Ñ—Ñ ‚Äî —Å–∫–æ—Ä–æ –∫—Ç–æ-—Ç–æ –∏–∑ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ —Ç–≤–æ–π —Ç–∏–∫–µ—Ç.`);
      }
    } catch (err) {
      console.error('[TICKET RESPONSE ERROR]', err);
    }
  }, 2000);
});

// –ó–∞–ø—É—Å–∫
client.login(process.env.TOKEN);

// HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
http.createServer((req, res) => {
  res.writeHead(200);
  res.end('Bot is alive');
}).listen(process.env.PORT || 3000);


