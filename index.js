const { Client, GatewayIntentBits, Partials, PermissionsBitField } = require('discord.js');
const http = require('http');

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent
  ],
  partials: [Partials.Channel]
});

client.once('ready', () => {
  console.log(`[BOT] ${client.user.tag} –∑–∞–ø—É—â–µ–Ω!`);
  client.user.setPresence({
    activities: [{ name: 'ü©∏ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ BLOODGRIEF ü©∏', type: 0 }],
    status: 'online'
  });
});

client.on('messageCreate', async message => {
  if (!message.guild || message.author.bot) return;

  const args = message.content.trim().split(/ +/g);
  const command = args.shift().toLowerCase();

  // !—Å–Ω–µ—Å–∏ –¥–æ 10000 —Å–æ–æ–±—â–µ–Ω–∏–π
  if (command === '!—Å–Ω–µ—Å–∏') {
    if (!message.member.permissions.has(PermissionsBitField.Flags.ManageMessages)) {
      return message.reply('‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.');
    }

    const count = parseInt(args[0]);
    if (!count || isNaN(count)) return message.reply('‚ùó –£–∫–∞–∂–∏ —á–∏—Å–ª–æ: `!—Å–Ω–µ—Å–∏ 30`');
    if (count < 1 || count > 10000) return message.reply('‚ùó –£–∫–∞–∂–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10000.');

    let deleted = 0;
    let left = count;

    try {
      while (left > 0) {
        const toDelete = left > 100 ? 100 : left;
        const messages = await message.channel.bulkDelete(toDelete, true);
        deleted += messages.size;
        left -= messages.size;

        if (messages.size < toDelete) break;
        await new Promise(res => setTimeout(res, 1000)); // –∞–Ω—Ç–∏—Å–ø–∞–º
      }

      message.channel.send(`üßπ –£–¥–∞–ª–µ–Ω–æ ${deleted} —Å–æ–æ–±—â–µ–Ω–∏–π`).then(msg => {
        setTimeout(() => msg.delete(), 3000);
      });
    } catch (err) {
      console.error('[bulkDelete ERROR]', err);
      message.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–æ–∑–º–æ–∂–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 14 –¥–Ω–µ–π.');
    }
  }

  // !–∏–Ω—Ñ–æ
  if (command === '!–∏–Ω—Ñ–æ') {
    return message.channel.send(
      `ü©∏ **–Ø ‚Äî –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ BLOODGRIEF** ü©∏\n\n` +
      `–Ø –æ—Ç–≤–µ—á–∞—é –∑–∞ —Ç–∏–∫–µ—Ç—ã, –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞.\n` +
      `–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª –∏ –Ω–∞—Å—Ç—Ä–æ–∏–ª –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞.\n\n` +
      `‚öôÔ∏è –ë—É–¥—É —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è —Å –∫–∞–∂–¥—ã–º –∞–ø–¥–µ–π—Ç–æ–º.\n\n` +
      `**–°–¥–µ–ª–∞–ª:** NaSkille`
    );
  }
});

// –û—Ç–≤–µ—Ç –≤ —Ç–∏–∫–µ—Ç-–∫–∞–Ω–∞–ª–µ
client.on('channelCreate', async channel => {
  if (!channel.isTextBased()) return;
  if (!channel.name.includes('ticket')) return;

  setTimeout(async () => {
    try {
      const messages = await channel.messages.fetch({ limit: 10 });
      const userMessage = messages.find(msg => !msg.author.bot);
      const user = userMessage?.author;

      if (user) {
        channel.send(`üëã –ü—Ä–∏–≤–µ—Ç, <@${user.id}>! –ñ–¥–∏ —Å—Ç–∞—Ñ—Ñ ‚Äî —Å–∫–æ—Ä–æ –∫—Ç–æ-—Ç–æ –∏–∑ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ —Ç–≤–æ–π —Ç–∏–∫–µ—Ç.`);
      } else {
        channel.send(`üëã –ü—Ä–∏–≤–µ—Ç! –ñ–¥–∏ —Å—Ç–∞—Ñ—Ñ ‚Äî —Å–∫–æ—Ä–æ –∫—Ç–æ-—Ç–æ –∏–∑ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ —Ç–≤–æ–π —Ç–∏–∫–µ—Ç.`);
      }
    } catch (err) {
      console.error('[TICKET AUTO-RESPONSE ERROR]', err);
    }
  }, 2000);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
client.login(process.env.TOKEN);

// –§–µ–π–∫–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
http.createServer((req, res) => {
  res.writeHead(200);
  res.end('Bot is alive');
}).listen(process.env.PORT || 3000);


