const {
  Client,
  GatewayIntentBits,
  ActivityType,
  PermissionsBitField,
  SlashCommandBuilder,
  REST,
  Routes
} = require('discord.js');

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildVoiceStates
  ]
});

client.once('ready', async () => {
  console.log(`üü¢ –ë–æ—Ç ${client.user.tag} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!`);

  client.user.setPresence({
    activities: [{
      name: 'ü©∏ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ BLOODGRIEF ü©∏',
      type: ActivityType.Playing
    }],
    status: 'dnd'
  });

  // ‚ûï Slash-–∫–æ–º–∞–Ω–¥—ã
  const commands = [
    new SlashCommandBuilder()
      .setName('–∏–Ω—Ñ–æ')
      .setDescription('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ BLOODGRIEF')
      .toJSON()
  ];

  const rest = new REST({ version: '10' }).setToken(process.env.TOKEN);
  try {
    await rest.put(
      Routes.applicationCommands(client.user.id),
      { body: commands }
    );
    console.log('‚úÖ Slash-–∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Slash-–∫–æ–º–∞–Ω–¥:', err);
  }
});

// üí¨ –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
client.on('messageCreate', async (message) => {
  if (message.author.bot) return;

  const args = message.content.trim().split(/ +/g);
  const command = args.shift().toLowerCase();

  if (command === '!–ø—Ä–∏–≤–µ—Ç' || command === '!hello') {
    return message.reply('‚ò†Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BLOODGRIEF, —Å–º–µ—Ä—Ç–Ω—ã–π.');
  }

  if (command === '!–∏–Ω—Ñ–æ') {
    return message.channel.send(`ü©∏ –≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ **BLOODGRIEF**.\n–ú–æ–¥–µ—Ä–∞—Ü–∏—è, –∑–∞—â–∏—Ç–∞, —Ç–∏–∫–µ—Ç—ã –∏ –∞–Ω—Ç–∏–∫–∏–±–µ—Ä–º—Ä–∞–∫. –í—ã–∂–∏–≤–∞–π –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–π.`);
  }

  if (command === '!—Å–Ω–µ—Å–∏') {
    if (!message.member.permissions.has(PermissionsBitField.Flags.ManageMessages)) {
      return message.reply('‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.');
    }

    const count = parseInt(args[0]);
    if (!count || isNaN(count) || count < 1 || count > 100) {
      return message.reply('‚ùó –£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç 1 –¥–æ 100, –Ω–∞–ø—Ä–∏–º–µ—Ä: `!—Å–Ω–µ—Å–∏ 20`');
    }

    try {
      await message.channel.bulkDelete(count + 1, true);
      message.channel.send(`üßπ –£–¥–∞–ª–µ–Ω–æ ${count} —Å–æ–æ–±—â–µ–Ω–∏–π`).then(msg => {
        setTimeout(() => msg.delete(), 3000);
      });
    } catch (err) {
      console.error(err);
      message.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤.');
    }
  }
});

// üéüÔ∏è –ê–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫ —Å –ø–∏–Ω–≥–æ–º (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ)
client.on('channelCreate', async (channel) => {
  if (
    channel.type === 0 &&
    channel.name.startsWith('ticket')
  ) {
    setTimeout(async () => {
      try {
        let userMessage;
        for (let i = 0; i < 2; i++) {
          const messages = await channel.messages.fetch({ limit: 10 });

          // –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –±–æ—Ç —É–∂–µ –ø–∏—Å–∞–ª?
          const alreadySent = messages.some(msg =>
            msg.author.id === client.user.id &&
            msg.content.includes('–ñ–¥–∏ —Å—Ç–∞—Ñ—Ñ')
          );
          if (alreadySent) return;

          userMessage = messages.find(msg => !msg.author.bot);
          if (userMessage) break;

          await new Promise(res => setTimeout(res, 2000)); // –∂–¥—ë–º –µ—â—ë 2 —Å–µ–∫
        }

        const mention = userMessage ? `<@${userMessage.author.id}>` : '';
        await channel.send(`üëã –ü—Ä–∏–≤–µ—Ç, ${mention} –ñ–¥–∏ —Å—Ç–∞—Ñ—Ñ ‚Äî —Å–∫–æ—Ä–æ –∫—Ç–æ-—Ç–æ –∏–∑ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ —Ç–≤–æ–π —Ç–∏–∫–µ—Ç.`);
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–µ –≤ —Ç–∏–∫–µ—Ç:', err);
      }
    }, 2000);
  }
});

// üîÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ Slash-–∫–æ–º–∞–Ω–¥—ã
client.on('interactionCreate', async interaction => {
  if (!interaction.isChatInputCommand()) return;

  if (interaction.commandName === '–∏–Ω—Ñ–æ') {
    await interaction.reply('ü©∏ –≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ **BLOODGRIEF**.\n–ú–æ–¥–µ—Ä–∞—Ü–∏—è, —Ç–∏–∫–µ—Ç—ã, –∑–∞—â–∏—Ç–∞ –∏ —Ö–∞–æ—Å.');
  }
});

client.login(process.env.TOKEN);

